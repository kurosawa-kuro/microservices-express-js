openapi: 3.0.3
info:
  title: ECShop Products Service API
  description: Product Catalog Service for ECShop microservices architecture
  version: 1.0.0
  contact:
    name: ECShop Development Team
    email: dev@ecshop.com

servers:
  - url: http://localhost:8083
    description: Local development server
  - url: http://products-service:8083
    description: Docker container server

paths:
  /actuator/health:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP

  /api/products:
    post:
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Search products
      operationId: searchProducts
      parameters:
        - name: name
          in: query
          description: Product name to search for
          schema:
            type: string
        - name: categoryId
          in: query
          description: Category ID to filter by
          schema:
            type: integer
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/{id}:
    get:
      summary: Get product by ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/categories:
    get:
      summary: Get all categories
      operationId: getCategories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Wireless Headphones"
        price:
          type: number
          example: 99.99
        rating:
          type: number
          example: 4.5
        image:
          type: string
          example: "https://example.com/image.jpg"
        description:
          type: string
          example: "High-quality wireless headphones"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        productCategories:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Electronics"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductCategory:
      type: object
      properties:
        productId:
          type: integer
        categoryId:
          type: integer
        assignedAt:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'

    CreateProductRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: "Wireless Headphones"
        price:
          type: number
          example: 99.99
        rating:
          type: number
          example: 4.5
        image:
          type: string
          example: "https://example.com/image.jpg"
        description:
          type: string
          example: "High-quality wireless headphones"
        categoryIds:
          type: array
          items:
            type: integer
          example: [1, 2]

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Wireless Headphones"
        price:
          type: number
          example: 99.99
        rating:
          type: number
          example: 4.5
        image:
          type: string
          example: "https://example.com/image.jpg"
        description:
          type: string
          example: "High-quality wireless headphones"

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Electronics"

    ProductSearchResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          example: 500
        error:
          type: string
          example: "INTERNAL_SERVER_ERROR"
        message:
          type: string
          example: "An internal server error occurred"
        path:
          type: string
          example: "/api/products"
