openapi: 3.0.3
info:
  title: ECShop Orders Service API
  description: Order Management Service for ECShop microservices architecture
  version: 1.0.0
  contact:
    name: ECShop Development Team
    email: dev@ecshop.com

servers:
  - url: http://localhost:8085
    description: Local development server
  - url: http://orders-service:8085
    description: Docker container server

paths:
  /actuator/health:
    get:
      summary: Health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP

  /api/orders:
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Cart is empty or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Cart service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all orders (admin)
      operationId: getAllOrders
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURNED]
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{orderId}:
    get:
      summary: Get order by ID
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
        - name: userId
          in: query
          description: User ID for authorization
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update order status
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{orderId}/cancel:
    post:
      summary: Cancel an order
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Cannot cancel order in current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/users/{userId}:
    get:
      summary: Get order history for a user
      operationId: getOrderHistory
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Order history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: string
          example: "user123"
        totalAmount:
          type: number
          example: 299.97
        status:
          type: string
          enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURNED]
          example: PENDING
        shippingAddress:
          type: object
          example: {"street": "123 Main St", "city": "Tokyo", "zipCode": "100-0001"}
        orderedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        orderId:
          type: integer
          example: 1
        productId:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          example: 99.99
        productName:
          type: string
          example: "Wireless Headphones"
        productImage:
          type: string
          example: "https://example.com/image.jpg"

    CreateOrderRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: "user123"
        shippingAddress:
          type: object
          example: {"street": "123 Main St", "city": "Tokyo", "zipCode": "100-0001"}

    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURNED]
          example: CONFIRMED
        userId:
          type: string
          example: "user123"

    CancelOrderRequest:
      type: object
      properties:
        userId:
          type: string
          example: "user123"

    OrderListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          example: 500
        error:
          type: string
          example: "INTERNAL_SERVER_ERROR"
        message:
          type: string
          example: "An internal server error occurred"
        path:
          type: string
          example: "/api/orders"
