services:
  # Infrastructure Services Only
  postgres:
    image: postgres:15
    container_name: cloud-shop-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-cloud-shop}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_MULTIPLE_DATABASES: cloud-shop_auth,cloud-shop_users,cloud-shop_cards,cloud-shop_loans,cloud-shop_products,cloud-shop_cart,cloud-shop_orders,keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloud-shop"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services Only (minimal for development)
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=development
      - PORT=8081
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cloud-shop}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/cloud-shop_auth
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/auth:/app/services/auth
      - ./shared:/app/shared
    command: npm run dev

  users-service:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    container_name: users-service
    ports:
      - "8082:8082"
    environment:
      - NODE_ENV=development
      - PORT=8082
      - DATABASE_URL=postgresql://${POSTGRES_USER:-cloud-shop}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/cloud-shop_users
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/users:/app/services/users
      - ./shared:/app/shared
    command: npm run dev

  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8072:8072"
    environment:
      - NODE_ENV=development
      - PORT=8072
      - JWT_SECRET=${JWT_SECRET:-change_me_to_secure_32_char_minimum_secret}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - USERS_SERVICE_URL=http://users-service:8082
    depends_on:
      - postgres
      - auth-service
      - users-service
    volumes:
      - ./services/gateway:/app
      - ./shared:/app/shared
    command: npm run dev

volumes:
  postgres-data:

networks:
  default:
    name: cloud-shop-dev-network